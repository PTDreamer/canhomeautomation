CCS PCH C Compiler, Version 4.057, 10706               05-Nov-08 19:50

               Filename: C:\DomoticaNovo\Estores\ProgramaPIC\lixo\bootloader2.lst

               ROM used: 884 bytes (3%)
                         Largest free fragment is 31480
               RAM used: 70 (5%) at main() level
                         132 (9%) worst case
               Stack:    3 locations

*
0500:  GOTO   0340
.................... #include "C:\DomoticaNovo\Estores\ProgramaPIC\lixo\bootloader2.h" 
.................... #include <18F2580.h> 
.................... //////// Standard Header file for the PIC18F2580 device //////////////// 
.................... #device PIC18F2580 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES WDT128                	//Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HS                    	//High speed Osc (> 4mhz) 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES BROWNOUT              	//Reset when brownout detected 
.................... #FUSES BORV21                	//Brownout reset at 2.1V 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES STVREN                	//Stack full/underflow will cause reset 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES LVP                   	//Low Voltage Programming on B3(PIC16) or B5(PIC18) 
.................... #FUSES NOWRT                 	//Program memory not write protected 
.................... #FUSES NOWRTD                	//Data EEPROM not write protected 
.................... #FUSES IESO                  	//Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                 	//Fail-safe clock monitor enabled 
.................... #FUSES PBADEN                	//PORTB pins are configured as analog input channels on RESET 
.................... #FUSES BBSIZ2K               	//2K words Boot Block size 
.................... #FUSES NOWRTC                	//configuration not registers write protected 
.................... #FUSES NOWRTB                	//Boot block not write protected 
.................... #FUSES NOEBTR                	//Memory not protected from table reads 
.................... #FUSES NOEBTRB               	//Boot block not protected from table reads 
.................... #FUSES NOCPB                 	//No Boot Block code protection 
.................... #FUSES LPT1OSC               	//Timer1 configured for low-power operation 
.................... #FUSES MCLR                  	//Master Clear pin enabled 
.................... #FUSES XINST                 	//Extended set extension and Indexed Addressing mode enabled 
....................  
.................... #use delay(clock=20000000) 
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
....................  
.................... #include "C:\DomoticaNovo\Estores\ProgramaPIC\lixo\bootloader2_bootloader.h" 
.................... //bootloader code 
.................... // APPLICATION_ISR_VECTOR - Where the compiler is going to put the ISR 
.................... #define FIRMWARE_UPGRADE_VECTOR  0          // Bootloader at Start of memory 
.................... #define MAX_UPGRADE_AREA         (0x500)    // Space required by bootloader 
.................... #define MIN_FIRMWARE_UPGRADE_MEMORY_AREA   (0x20)   // Start of bootloder code 
.................... #define MAX_FIRMWARE_UPGRADE_MEMORY_AREA   (MAX_UPGRADE_AREA-1) // End of bootloder code 
.................... #define APPLICATION_RESET_VECTOR 0x500     // New RESET Vector 
.................... #define APPLICATION_ISR_VECTOR   0x508     // New Interrupt Vector 
....................  
.................... // Re-vectored RESET vector from 0x0000 to 0x0500 
.................... // Re-vectored Interrupt vector from 0x0008 to 0x0508 
.................... #build(reset=APPLICATION_RESET_VECTOR, interrupt=APPLICATION_ISR_VECTOR) 
....................  
....................  
.................... #define LOADER_END   MAX_UPGRADE_AREA -1 
.................... #define LOADER_ADDR  MIN_FIRMWARE_UPGRADE_MEMORY_AREA 
....................  
....................  
.................... #define BUFFER_LEN_LOD 64 
....................  
.................... int  buffidx; 
.................... char buffer[BUFFER_LEN_LOD]; 
....................  
.................... #define ACKLOD 0x06 
.................... #define XON    0x11 
.................... #define XOFF   0x13 
....................  
.................... #SEPARATE 
.................... unsigned int atoi_b16(char *s); 
....................  
.................... #ORG LOADER_ADDR+10, LOADER_END auto=0 default 
.................... void real_load_program (void) 
.................... { 
....................    int1  do_ACKLOD, done=FALSE; 
00FE:  BCF    46.1
....................    int8  checksum, line_type; 
....................    int16 l_addr,h_addr=0; 
0100:  CLRF   4B
0102:  CLRF   4C
....................    int32 addr; 
....................    #if getenv("FLASH_ERASE_SIZE")>2 
....................       int32 next_addr; 
....................    #endif 
....................    int8  dataidx, i, count; 
....................    int8  data[32]; 
....................  
....................    while (!done)  // Loop until the entire program is downloaded 
....................    { 
0104:  BTFSC  46.1
0106:  BRA    0328
....................       buffidx = 0;  // Read into the buffer until 0x0D ('\r') is received or the buffer is full 
0108:  CLRF   05
....................       do { 
....................          buffer[buffidx] = getc(); 
010A:  CLRF   03
010C:  MOVF   05,W
010E:  ADDLW  06
0110:  MOVWF  FE9
0112:  MOVLW  00
0114:  ADDWFC 03,W
0116:  MOVWF  FEA
0118:  BTFSS  F9E.5
011A:  BRA    0118
011C:  MOVFF  FAE,FEF
....................       } while ( (buffer[buffidx++] != 0x0D) && (buffidx <= BUFFER_LEN_LOD) ); 
0120:  MOVF   05,W
0122:  INCF   05,F
0124:  CLRF   03
0126:  ADDLW  06
0128:  MOVWF  FE9
012A:  MOVLW  00
012C:  ADDWFC 03,W
012E:  MOVWF  FEA
0130:  MOVF   FEF,W
0132:  SUBLW  0D
0134:  BZ    013C
0136:  MOVF   05,W
0138:  SUBLW  40
013A:  BC    010A
....................  
....................       putchar (XOFF);  // Suspend sender 
013C:  MOVLW  13
013E:  BTFSS  F9E.4
0140:  BRA    013E
0142:  MOVWF  FAD
....................  
....................       do_ACKLOD = TRUE; 
0144:  BSF    46.0
....................  
....................       // Only process data blocks that start with ':' 
....................       if (buffer[0] == ':') { 
0146:  MOVF   06,W
0148:  SUBLW  3A
014A:  BTFSS  FD8.2
014C:  BRA    0312
....................          count = atoi_b16 (&buffer[1]);  // Get the number of bytes from the buffer 
014E:  CLRF   x7E
0150:  MOVLW  07
0152:  MOVWF  x7D
0154:  RCALL  002A
0156:  MOVFF  01,57
....................  
....................          // Get the lower 16 bits of address 
....................          l_addr = make16(atoi_b16(&buffer[3]),atoi_b16(&buffer[5])); 
015A:  CLRF   x7E
015C:  MOVLW  09
015E:  MOVWF  x7D
0160:  RCALL  002A
0162:  MOVFF  01,78
0166:  CLRF   x7E
0168:  MOVLW  0B
016A:  MOVWF  x7D
016C:  RCALL  002A
016E:  MOVFF  78,4A
0172:  MOVFF  01,49
....................  
....................          line_type = atoi_b16 (&buffer[7]); 
0176:  CLRF   x7E
0178:  MOVLW  0D
017A:  MOVWF  x7D
017C:  RCALL  002A
017E:  MOVFF  01,48
....................  
....................          addr = make32(h_addr,l_addr); 
0182:  MOVFF  4B,4F
0186:  MOVFF  4C,50
018A:  MOVFF  49,4D
018E:  MOVFF  4A,4E
....................  
....................          #if defined(__PCM__)  // PIC16 uses word addresses 
....................             addr /= 2; 
....................          #endif 
....................  
....................          // If the line type is 1, then data is done being sent 
....................          if (line_type == 1) { 
0192:  DECFSZ 48,W
0194:  BRA    019A
....................             done = TRUE; 
0196:  BSF    46.1
....................          #if defined(__PCM__) 
....................          } else if ((addr < LOADER_ADDR || addr > LOADER_END) && addr < 0x2000){ 
....................          #elif defined(__PCH__) 
....................          } else if ((addr < LOADER_ADDR || addr > LOADER_END) && addr < 0x300000){ 
0198:  BRA    0312
019A:  MOVF   50,F
019C:  BNZ   01AC
019E:  MOVF   4F,F
01A0:  BNZ   01AC
01A2:  MOVF   4E,F
01A4:  BNZ   01AC
01A6:  MOVF   4D,W
01A8:  SUBLW  1F
01AA:  BC    01BC
01AC:  MOVF   50,F
01AE:  BNZ   01BC
01B0:  MOVF   4F,F
01B2:  BNZ   01BC
01B4:  MOVF   4E,W
01B6:  SUBLW  04
01B8:  BTFSC  FD8.0
01BA:  BRA    0312
01BC:  MOVF   50,F
01BE:  BTFSS  FD8.2
01C0:  BRA    0312
01C2:  MOVF   4F,W
01C4:  SUBLW  2F
01C6:  BTFSS  FD8.0
01C8:  BRA    0312
....................          #endif 
....................             checksum = 0;  // Sum the bytes to find the check sum value 
01CA:  CLRF   47
....................             for (i=1; i<(buffidx-3); i+=2) 
01CC:  MOVLW  01
01CE:  MOVWF  56
01D0:  MOVLW  03
01D2:  SUBWF  05,W
01D4:  SUBWF  56,W
01D6:  BC    01F8
....................                checksum += atoi_b16 (&buffer[i]); 
01D8:  CLRF   03
01DA:  MOVF   56,W
01DC:  ADDLW  06
01DE:  MOVWF  x78
01E0:  MOVLW  00
01E2:  ADDWFC 03,W
01E4:  MOVWF  x79
01E6:  MOVWF  x7E
01E8:  MOVFF  78,7D
01EC:  RCALL  002A
01EE:  MOVF   01,W
01F0:  ADDWF  47,F
01F2:  MOVLW  02
01F4:  ADDWF  56,F
01F6:  BRA    01D0
....................             checksum = 0xFF - checksum + 1; 
01F8:  MOVLW  FF
01FA:  BSF    FD8.0
01FC:  SUBFWB 47,W
01FE:  ADDLW  01
0200:  MOVWF  47
....................  
....................             if (checksum != atoi_b16 (&buffer[buffidx-3])) 
0202:  MOVLW  03
0204:  SUBWF  05,W
0206:  CLRF   03
0208:  ADDLW  06
020A:  MOVWF  x79
020C:  MOVLW  00
020E:  ADDWFC 03,W
0210:  MOVWF  x7A
0212:  MOVWF  x7E
0214:  MOVFF  79,7D
0218:  RCALL  002A
021A:  MOVF   01,W
021C:  SUBWF  47,W
021E:  BZ    0224
....................                do_ACKLOD = FALSE; 
0220:  BCF    46.0
....................             else   { 
0222:  BRA    0312
....................                if (line_type == 0) { 
0224:  MOVF   48,F
0226:  BNZ   02F0
....................                   // Loops through all of the data and stores it in data 
....................                   // The last 2 bytes are the check sum, hence buffidx-3 
....................                   for (i = 9,dataidx=0; i < buffidx-3; i += 2) 
0228:  MOVLW  09
022A:  MOVWF  56
022C:  CLRF   55
022E:  MOVLW  03
0230:  SUBWF  05,W
0232:  SUBWF  56,W
0234:  BC    0274
....................                      data[dataidx++]=atoi_b16(&buffer[i]); 
0236:  MOVF   55,W
0238:  INCF   55,F
023A:  CLRF   03
023C:  ADDLW  58
023E:  MOVWF  01
0240:  MOVLW  00
0242:  ADDWFC 03,F
0244:  MOVFF  01,79
0248:  MOVFF  03,7A
024C:  CLRF   03
024E:  MOVF   56,W
0250:  ADDLW  06
0252:  MOVWF  x7B
0254:  MOVLW  00
0256:  ADDWFC 03,W
0258:  MOVWF  x7C
025A:  MOVWF  x7E
025C:  MOVFF  7B,7D
0260:  RCALL  002A
0262:  MOVFF  7A,FEA
0266:  MOVFF  79,FE9
026A:  MOVFF  01,FEF
....................  
....................                   #if getenv("FLASH_ERASE_SIZE") > getenv("FLASH_WRITE_SIZE") 
....................                      #if defined(__PCM__) 
026E:  MOVLW  02
0270:  ADDWF  56,F
0272:  BRA    022E
....................                         if ((addr!=next_addr)&&(addr&(getenv("FLASH_ERASE_SIZE")-1)!=0)) 
....................                      #else 
....................                         if ((addr!=next_addr)&&(addr&(getenv("FLASH_ERASE_SIZE")/2-1)!=0)) 
0274:  MOVF   51,W
0276:  SUBWF  4D,W
0278:  BNZ   028C
027A:  MOVF   52,W
027C:  SUBWF  4E,W
027E:  BNZ   028C
0280:  MOVF   53,W
0282:  SUBWF  4F,W
0284:  BNZ   028C
0286:  MOVF   54,W
0288:  SUBWF  50,W
028A:  BZ    02BE
028C:  MOVF   4D,W
028E:  ANDLW  01
0290:  MOVWF  00
0292:  CLRF   01
0294:  CLRF   02
0296:  CLRF   03
0298:  MOVF   00,F
029A:  BNZ   02A8
029C:  MOVF   01,F
029E:  BNZ   02A8
02A0:  MOVF   02,F
02A2:  BNZ   02A8
02A4:  MOVF   03,F
02A6:  BZ    02BE
....................                      #endif 
....................                            erase_program_eeprom(addr); 
02A8:  BSF    FD0.6
02AA:  MOVFF  4F,FF8
02AE:  MOVFF  4E,FF7
02B2:  MOVFF  4D,FF6
02B6:  BSF    FA6.4
02B8:  BCF    FA6.6
02BA:  RCALL  008C
02BC:  CLRF   FF8
....................                      next_addr = addr + 1; 
02BE:  MOVLW  01
02C0:  ADDWF  4D,W
02C2:  MOVWF  51
02C4:  MOVLW  00
02C6:  ADDWFC 4E,W
02C8:  MOVWF  52
02CA:  MOVLW  00
02CC:  ADDWFC 4F,W
02CE:  MOVWF  53
02D0:  MOVLW  00
02D2:  ADDWFC 50,W
02D4:  MOVWF  54
....................                   #endif 
....................                   write_program_memory(addr, data, count); 
02D6:  MOVFF  4F,FF8
02DA:  MOVFF  4E,FF7
02DE:  MOVFF  4D,FF6
02E2:  CLRF   FEA
02E4:  MOVLW  58
02E6:  MOVWF  FE9
02E8:  MOVFF  57,78
02EC:  RCALL  00AC
....................                } 
....................                else if (line_type == 4) 
02EE:  BRA    0312
02F0:  MOVF   48,W
02F2:  SUBLW  04
02F4:  BNZ   0312
....................                   h_addr = make16(atoi_b16(&buffer[9]), atoi_b16(&buffer[11])); 
02F6:  CLRF   x7E
02F8:  MOVLW  0F
02FA:  MOVWF  x7D
02FC:  RCALL  002A
02FE:  MOVFF  01,78
0302:  CLRF   x7E
0304:  MOVLW  11
0306:  MOVWF  x7D
0308:  RCALL  002A
030A:  MOVFF  78,4C
030E:  MOVFF  01,4B
....................             } 
....................          } 
....................       } 
....................  
....................       if (do_ACKLOD) 
0312:  BTFSS  46.0
0314:  BRA    031E
....................          putchar (ACKLOD); 
0316:  MOVLW  06
0318:  BTFSS  F9E.4
031A:  BRA    0318
031C:  MOVWF  FAD
....................  
....................       putchar(XON); 
031E:  MOVLW  11
0320:  BTFSS  F9E.4
0322:  BRA    0320
0324:  MOVWF  FAD
....................    } 
0326:  BRA    0104
....................  
....................    putchar (ACKLOD); 
0328:  MOVLW  06
032A:  BTFSS  F9E.4
032C:  BRA    032A
032E:  MOVWF  FAD
....................    putchar(XON); 
0330:  MOVLW  11
0332:  BTFSS  F9E.4
0334:  BRA    0332
0336:  MOVWF  FAD
....................    #ifndef _bootloader 
....................    reset_cpu(); 
0338:  RESET
....................    #endif 
.................... } 
033A:  RETLW  00
....................  
.................... unsigned int atoi_b16(char *s) {  // Convert two hex characters to a int8 
....................    unsigned int result = 0; 
*
002A:  CLRF   x7F
....................    int i; 
....................  
....................    for (i=0; i<2; i++,s++)  { 
002C:  CLRF   x80
002E:  MOVF   x80,W
0030:  SUBLW  01
0032:  BNC   0086
....................       if (*s >= 'A') 
0034:  MOVFF  7E,03
0038:  MOVFF  7D,FE9
003C:  MOVFF  7E,FEA
0040:  MOVF   FEF,W
0042:  SUBLW  40
0044:  BC    0062
....................          result = 16*result + (*s) - 'A' + 10; 
0046:  MOVF   x7F,W
0048:  MULLW  10
004A:  MOVFF  FF3,81
004E:  MOVFF  7D,FE9
0052:  MOVFF  7E,FEA
0056:  MOVF   FEF,W
0058:  ADDWF  x81,W
005A:  ADDLW  BF
005C:  ADDLW  0A
005E:  MOVWF  x7F
....................       else 
0060:  BRA    007A
....................          result = 16*result + (*s) - '0'; 
0062:  MOVF   x7F,W
0064:  MULLW  10
0066:  MOVFF  FF3,81
006A:  MOVFF  7D,FE9
006E:  MOVFF  7E,FEA
0072:  MOVF   FEF,W
0074:  ADDWF  x81,W
0076:  ADDLW  D0
0078:  MOVWF  x7F
....................    } 
007A:  MOVF   x80,W
007C:  INCF   x80,F
007E:  INCF   x7D,F
0080:  BTFSC  FD8.2
0082:  INCF   x7E,F
0084:  BRA    002E
....................  
....................    return(result); 
0086:  MOVFF  7F,01
.................... } 
008A:  RETLW  00
....................  
....................  
....................  
.................... //BOOTLOADER AT START - Include Bootloader.h in your application - See sample application Ex_Bootload.c   
.................... //BOOTLOADER AT END - Always include the projectname_bootloader.h file in future versions of the project 
....................  
.................... // NOTE - User must include PROJECTNAME_bootloader.C in his final Application program 
....................  
.................... void application(void) { 
....................   while(TRUE); 
*
033C:  BRA    033C
.................... } 
033E:  RETLW  00
.................... void main() 
.................... {// Enter Bootloader if Pin B5 is low after a RESET 
0340:  CLRF   FF8
0342:  BCF    FD0.7
0344:  CLRF   FEA
0346:  CLRF   FE9
0348:  BSF    FB8.3
034A:  MOVLW  08
034C:  MOVWF  FAF
034E:  MOVLW  02
0350:  MOVWF  FB0
0352:  MOVLW  A6
0354:  MOVWF  FAC
0356:  MOVLW  90
0358:  MOVWF  FAB
035A:  MOVF   FC1,W
035C:  ANDLW  C0
035E:  IORLW  0F
0360:  MOVWF  FC1
....................    if(!input(PIN_B5)) 
0362:  BSF    F93.5
0364:  BTFSC  F81.5
0366:  BRA    036A
....................    { 
....................       real_load_program(); 
0368:  RCALL  00FE
....................    } 
....................  
....................       application(); 
036A:  RCALL  033C
....................  
....................  
....................    setup_adc_ports(NO_ANALOGS|VSS_VDD); 
036C:  MOVF   FC1,W
036E:  ANDLW  C0
0370:  IORLW  0F
0372:  MOVWF  FC1
....................    setup_adc(ADC_OFF|ADC_TAD_MUL_0); 
0374:  BCF    FC2.0
....................    setup_spi(SPI_SS_DISABLED); 
0376:  BCF    FC6.5
0378:  BCF    F94.5
037A:  BSF    F94.4
037C:  BCF    F94.3
037E:  MOVLW  01
0380:  MOVWF  FC6
0382:  MOVLW  00
0384:  MOVWF  FC7
....................    setup_wdt(WDT_OFF); 
0386:  BCF    FD1.0
....................    setup_timer_0(RTCC_INTERNAL); 
0388:  MOVLW  80
038A:  MOVWF  FD5
....................    setup_timer_1(T1_DISABLED); 
038C:  CLRF   FCD
....................    setup_timer_2(T2_DISABLED,0,1); 
038E:  MOVLW  00
0390:  MOVWF  FCA
0392:  MOVLW  00
0394:  MOVWF  FCB
....................    setup_vref(FALSE); 
0396:  CLRF   FB5
.................... //Setup_Oscillator parameter not selected from Intr Oscillotar Config tab 
....................  
....................    // TODO: USER CODE!! 
....................  
.................... } 
0398:  SLEEP 

Configuration Fuses:
   Word  1: C200   HS IESO FCMEN
   Word  2: 0E1F   BROWNOUT WDT128 NOWDT BORV21 NOPUT
   Word  3: 8600   PBADEN LPT1OSC MCLR
   Word  4: 0095   STVREN NODEBUG LVP BBSIZ2K NOXINST
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
